variables:
  AWS_REGION: "us-gov-west-1"
  DOTNET_IMAGE: "mcr.microsoft.com/dotnet/samples:aspnetapp"
  ROLE_ARN: "arn:aws-us-gov:iam::190059162174:role/cicd-cross-account-dca752-role"
  http_proxy: "http://pixproxy.fm.org:8080"
  HTTPS_PROXY: "http://pixproxy.fm.org:8080"

stages:
  - terraform_setup
  - terraform_plan
  - terraform_apply
  - terraform_output
  - docker_pull_push
  - terraform_destroy

before_script:
  - export AWS_DEFAULT_REGION=$AWS_REGION
  - >
    assume_role() {
      local ROLE_ARN=$1
      local SESSION_NAME=$2
      echo "Assuming role: $ROLE_ARN"
      CREDS=$(aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name "$SESSION_NAME" || { echo "Failed to assume role $ROLE_ARN"; exit 1; })
      export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
      export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
      export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
    }
  - |
    # Install Terraform using GitLab runner
    if ! command -v terraform &> /dev/null; then
      echo "Installing Terraform..."
      TERRAFORM_VERSION=1.3.6
      wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      mv terraform /usr/local/bin/
      rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    fi-

terraform_setup:
  stage: terraform_setup
  script:
    - assume_role "$ROLE_ARN" "terraform-setup"
    - aws sts get-caller-identity
    - echo "Initializing Terraform without remote backend..."
    - terraform init
    - echo "Terraform setup complete."
  artifacts:
    paths:
      - .terraform
      - .terraform.lock.hcl
      - terraform.tfstate
    expire_in: 2 hours

terraform_plan:
  stage: terraform_plan
  dependencies:
    - terraform_setup
  script:
    - assume_role "$ROLE_ARN" "terraform-plan"
    - aws sts get-caller-identity
    - echo "Validating Terraform configuration..."
    - terraform validate
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - tfplan
      - .terraform
      - .terraform.lock.hcl
      - terraform.tfstate
    expire_in: 2 hours

terraform_apply:
  stage: terraform_apply
  when: manual
  dependencies:
    - terraform_plan
  script:
    - assume_role "$ROLE_ARN" "terraform-apply"
    - aws sts get-caller-identity
    - if [ -f terraform.tfstate ]; then echo "State file found. Proceeding with apply..."; else echo "State file missing. Initializing Terraform..."; terraform init; fi
    - terraform apply -auto-approve tfplan
  artifacts:
    paths:
      - terraform.tfstate
    expire_in: 2 hours

terraform_output:
  stage: terraform_output
  when: manual
  dependencies:
    - terraform_apply
  before_script:
    - apk add --no-cache jq
    - assume_role "$ROLE_ARN" "terraform-output"
  script:
    - aws sts get-caller-identity
    - if [ -f terraform.tfstate ]; then echo "State file found. Proceeding with outputs..."; else echo "State file missing. Initializing Terraform..."; terraform init; fi
    - terraform output -json > outputs.json
    - jq -r '.repository_url.value' outputs.json > repository_url
    - jq -r '.ecr_repository_name.value' outputs.json > ecr_repository_name
  artifacts:
    paths:
      - outputs.json
      - repository_url
      - ecr_repository_name
    expire_in: 2 hours

docker_pull_push:
  stage: docker_pull_push
  when: manual
  image:
    name: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python3 py3-pip py3-virtualenv
    - python3 -m venv /tmp/venv
    - source /tmp/venv/bin/activate
    - pip install awscli
    - export REPOSITORY_URL=$(cat repository_url)
    - export ECR_REPOSITORY_NAME=$(cat ecr_repository_name)
    - assume_role "$ROLE_ARN" "docker-ecr"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin "$REPOSITORY_URL"
  script:
    - docker pull "$DOTNET_IMAGE"
    - docker tag "$DOTNET_IMAGE" "${REPOSITORY_URL}:latest"
    - docker push "${REPOSITORY_URL}:latest"

terraform_destroy:
  stage: terraform_destroy
  when: manual
  dependencies:
    - terraform_apply
  script:
    - assume_role "$ROLE_ARN" "terraform-destroy"
    - aws sts get-caller-identity
    - terraform destroy -auto-approve